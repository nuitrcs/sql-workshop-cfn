---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  An RDS instance and EC2 instance in a security group that allows SSH and postgresql access from the specified networks.

Parameters: 
  RDSInstanceType: 
    Type: String
    Default: db.t2.micro
    AllowedValues: 
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
    Description: Enter db.t2.micro, db.t2.small, db.t2.medium, or db.t2.large. Default is db.t2.micro.

  EC2InstanceType: 
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.large
    Description: Enter t2.micro or t2.large. Default is t2.micro.

  EC2KeyName:
    Type: String
    Description: Name of the existing EC2 Keypair to use to create the EC2 instance.
    
  EC2InstanceAMI:
    Description: The AMI to use for the instances. Default is Amazon linux (Ohio Region). cfn-init required.
    Type: String
    Default: ami-8a7859ef

  VpcId:
    Type: String
    Description: ID of the VPC to create the security group and EC2 instance in. Default is art-rch-rcs peered VPC.
    Default: vpc-71e96318

  SubnetId:
    Type: String
    Description: The subnet to launch the EC2 instance into. Defaults to art-rch-rcs peered-vpc-PubAZ1.
    Default: subnet-07d256fc7d86a8391

  DbMasterUsername:
    Type: String
    Description: DB Master Username
    Default: rcsadmin

  DbMasterPassword:
    Type: String
    Description: DB Master Password
    Default: rcsadmin

  DbSubnetGroupName:
    Type: String
    Description: DB Subnet Group to place the RDS instance in. Must be same VPC as SubnetId and VPC parameters.
    Default: peered-vpc-public

  DbInstanceName:
    Type: String
    Description: A name for the RDS instance
    Default: sql-workshop

  DbSnapshotIdentifier:
    Type: String
    Description: Name of the RDS DB Snapshot to create the instance from
    Default: created-workshop

  InstanceProfileName:
    Type: String
    Description: Instance Profile for EC2 instance
    Default: workshop-role

  NetIdFileUri:
    Type: String
    Description: S3 URI of file containing NetIDs for access (one per line)
    Default: s3://nuitrcs-resources/netids.txt

  EC2SecurityGroupName:
    Type: String
    Description: Name for the security group
    Default: SQL Workshop EC2 Security Group

Resources:

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref EC2SecurityGroupName
      GroupDescription: Allows inbound SSH and postgresql
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: "129.105.0.0/16"
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: "165.124.0.0/16"
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: "10.10.0.0/8"
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: "129.105.0.0/16"
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
        - CidrIp: "165.124.0.0/16"
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
        - CidrIp: "10.10.0.0/8"
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2InstanceAMI
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroupIds: [!Ref EC2SecurityGroup]
      SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref InstanceProfileName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
          /usr/bin/aws s3 cp ${NetIdFileUri} /tmp/netids.txt --region ${AWS::Region}
          /usr/bin/aws s3 cp s3://nuitrcs-resources/setup-sql-workshop-users.sh /tmp/setup-sql-workshop-users.sh --region ${AWS::Region}
          /bin/chmod 755 /tmp/setup-sql-workshop-users.sh
          export PGPASSWORD=${DbMasterPassword}
          export PGUSER=${DbMasterUsername}
          export PGHOST=${RDSInstance.Endpoint.Address}
          /tmp/setup-sql-workshop-users.sh </tmp/netids.txt
      Tags:
        - Key: Name
          Value: !Join ['-', [ !Ref 'AWS::StackName', EC2Instance] ]
    DependsOn: RDSInstance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              postgresql95: []

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 100
      DBInstanceClass: !Ref RDSInstanceType
      DBSnapshotIdentifier: !Ref DbSnapshotIdentifier
      DBSubnetGroupName: !Ref DbSubnetGroupName
      Engine: postgres
      EngineVersion: 11.4
      MasterUsername: !Ref DbMasterUsername
      MasterUserPassword: !Ref DbMasterPassword
      MultiAZ: No
      PubliclyAccessible: Yes
      StorageType: standard
      VPCSecurityGroups: [!Ref EC2SecurityGroup]
      DBInstanceIdentifier: !Ref DbInstanceName

Outputs:
  EC2InstanceDNSName:
    Description: DNS Name of EC2 Instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
    Export:
      Name: EC2InstanceDNSName
    
  RDSInstanceDNSName:
    Description: DNS Name of RDS Instance
    Value: !GetAtt [RDSInstance, Endpoint.Address]
    Export:
      Name: RDSInstanceDNSName